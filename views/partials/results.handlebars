<div id="results">
    <div id="readerStatus">

    </div>
    <!--<div>
        <h1>Read As Ascii</h1>
        <button type="submit" id="getaD">
            get ascii data
        </button>
        <span id="aData"></span>
    </div>
     <div>
        <h1>Read As Raw Data</h1>
        <button type="submit" id="getrD">
            get raw hex data
        </button>
        <span id="rData"></span>
    </div>-->
    <div>
        <div id="allUsers"></div>
    </div>
    <div>
        <h1>Generate ID for Card</h1>
        <form>
            <div>
                <input id="email" type="email" name="email" placeholder="email" required> email
            </div>
            <div>
                <input id="pass" type="password" name="pass" placeholder="password" required> password
            </div>
        </form>
        <button id="writeCardID">generate unique card id</button>
        <p id="writeMessageResponse"></p>
    </div>
</div>
<script>
    let socket = io.connect('http://10.0.0.3:3000/');

    let rStatus = document.getElementById("readerStatus");

    let getAsciiData = document.getElementById("getaD");
    let aD = document.getElementById("aData");

    let getRawData = document.getElementById("getrD");
    let rD = document.getElementById("rData");

    let wCardId = document.getElementById("writeCardID");
    let msgRes = document.getElementById("writeMessageResponse");

    let email = document.getElementById('email');
    let pass = document.getElementById('pass');

    let allUsers = document.getElementById('allUsers')
    
    /*getAsciiData.onclick = () => {
        socket.emit('readAscii',{
            message: "getAsciiString"
        })
    }

    socket.on('readAscii', function(data) {
        aD.innerHTML = data.map((item, i) => {
            if(/(\d{8})/.test(item) && item.length === 8){
                return `<li>id#: ${item}</li>`

            } else if (/(\d{2})/.test(item) && item.length === 3){
                return `<li>age: ${item.replace(".", "")}</li>`
            } else if (/(\d{1,})/.test(item) && item.length > 3 && item.length < 7){
                return 
            } else {
                return `<li>name: ${item}</li>`
            }
        });
        console.log(data);
    });
    */

    socket.on('trying', function(data) {
        rStatus.innerHTML = `<h2>${data}</h2>`;
        socket.emit('tryingRec', {
            message: "recieved someone is trying to log in"
        })
        console.log(data)
    })

    socket.on('removed', function(data) {
        rStatus.innerHTML = `<h2>${data}</h2>`;
        console.log(data);
    })

    /*getRawData.onclick = () => {
        fetch('http://localhost:3000/rawhex/')
        .then((res) => {
            //console.log(res);
            return res.json();
        })
        .then((raw) => {
            console.log("raw",raw);
            let allRaw = raw.rawHex;
            rD.innerHTML = allRaw.map((item, i) => {
                    return `<li>${item}</li>`
            });
        });
    }*/

    wCardId.onclick = () => {
        if(email.value !== "" && email.value !== undefined && email.value !== null || pass.value !== "" && pass.value !== undefined && pass.value !== null){
            socket.emit("writeData",{
                message: "trying to wright data",
                email: email.value,
                pass: pass.value
            })
        }
    }

    socket.on('writeData', function(data){
        console.log(data);
        msgRes.innerHTML = data.message;
    })

    socket.on('getAllUsers', function(data){
        allUsers.innerHTML = data.map((item) => {
            return JSON.stringify(item);
        })
    })
</script>